package devonframe.gyva.contents.injection.controller;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import devonframe.fileupload.FileUpload;
import devonframe.fileupload.model.UploadFileInfo;
import devonframe.gyva.admin.contents.survey.model.Survey;
import devonframe.gyva.admin.contents.survey.service.SurveyService;
import devonframe.gyva.admin.system.code.model.Code;
import devonframe.gyva.admin.system.code.service.CodeService;
import devonframe.gyva.admin.system.log.model.Log;
import devonframe.gyva.admin.system.log.service.LogService;
import devonframe.gyva.admin.user.helpdesk.model.Helpdesk;
import devonframe.gyva.admin.user.helpdesk.service.HelpdeskService;
import devonframe.gyva.common.fileupload.service.FileUploadService;
import devonframe.gyva.common.menu.model.Menu;
import devonframe.gyva.common.menu.service.MenuService;
import devonframe.gyva.common.user.model.User;
import devonframe.gyva.common.user.service.UserService;
import devonframe.gyva.common.util.UtilService;
import devonframe.gyva.contents.model.Contents;
import devonframe.gyva.contents.service.ContentsService;

@Controller
public class InjectionContentsController {
	
    @Resource(name = "logService")
    private LogService logService;
    
    @Resource(name = "menuService")
    private MenuService menuService;

	@Resource(name = "codeService")
	private CodeService codeService;

    @Resource(name = "contentsService")
    private ContentsService contentsService;

    @Resource(name = "helpdeskService")
    private HelpdeskService helpdeskService;
	
	@Resource(name = "userService")
	private UserService userService;

    @Resource(name = "surveyService")
    private SurveyService surveyService;
	
	@Resource(name = "utilService")
	private UtilService utilService;

	@Resource(name = "fileUpload")
	private FileUpload fileUpload;
	
	@Resource(name = "fileUploadService")
	private FileUploadService fileUploadService;
    
    @RequestMapping(value="/contents/injectionList.do")
    public String retrieveContentsList(Contents input, ModelMap model, HttpSession session){
    	
		Menu menu = menuService.retrieveCallMenuInfo(input);
		
		String loginChk = (String) session.getAttribute("userId");
		String retrunUrl = menu.getRetrunUrl();
	
		if (loginChk != null) {
			
			if (!menu.getMenuType().equals("AD")) { 
	
				Log log = new Log();
				log.setUserId((String) loginChk);
				log.setMenuId((String) input.getMenuId());
				log.setContentsId((String) input.getContentsId());
				log.setCategoryCode((String) input.getCategoryCode());
	
				logService.insertLog(log);
			
			}  
				
			if (menu.getMenuType().equals("AD")) {
				
				input.setMenuId(contentsService.retrieveFrontMenuId(input).getMenuId());
				
			}
    				
	        input.setUserId((String)session.getAttribute("userId"));
	        input.setCategoryCode("01");
	        List<Contents> upperList = contentsService.retrieveContentsList(input);	        
	        input.setCategoryCode("02");
	        List<Contents> midList = contentsService.retrieveContentsList(input);	        
	        input.setCategoryCode("03");
	        List<Contents> lowList = contentsService.retrieveContentsList(input);	        
	        input.setCategoryCode("04");
	        List<Contents> exclusiveList = contentsService.retrieveContentsList(input);

	        model.addAttribute("input", input);
	        model.addAttribute("menu", menu);
	        model.addAttribute("upperList", upperList);
	        model.addAttribute("midList", midList);
	        model.addAttribute("lowList", lowList);
	        model.addAttribute("exclusiveList", exclusiveList);
	        
	        return retrunUrl;
		
    	} else {    		
		
    		return "redirect:/common/error/lostSession.do";  
			
    	} 	        
	        
    }
    
    @RequestMapping(value="/contents/injectionDetail.do")
    public String retrieveContentsDetail(Contents input, Code code, ModelMap model, HttpSession session){
    	
		Menu menu = menuService.retrieveCallMenuInfo(input);
		
		String loginChk = (String) session.getAttribute("userId");
		String retrunUrl = menu.getDetailUrl();
    	
    	if (loginChk != null) {
			
			if (!menu.getMenuType().equals("AD")) { 
				
				Log log = new Log();
				log.setUserId((String) loginChk);
				log.setMenuId((String) input.getMenuId());
				log.setContentsId((String) input.getContentsId());
				log.setCategoryCode((String) input.getCategoryCode());
				
				logService.insertLog(log); 
				
			}  
			
			if (menu.getMenuType().equals("AD")) {
				
				input.setMenuId(contentsService.retrieveFrontMenuId(input).getMenuId());
				
			}
	    	
	    	input.setUserId(loginChk);
	    	Contents result = contentsService.retrieveContents(input);

	    	Helpdesk helpdeskInput = new Helpdesk();
	    	helpdeskInput.setStateCode(null);
	    	helpdeskInput.setUserId(input.getUserId());
	    	helpdeskInput.setMenuId(input.getMenuId());
	    	helpdeskInput.setContentsId(input.getContentsId());	    	
	    	List<Helpdesk> helpdeskList = helpdeskService.retrieveHelpdeskContentsList(helpdeskInput);	  
			
	    	Survey surveyInput = new Survey();
	    	surveyInput.setSurveyId(result.getSurveyId());
	    	Survey surveyList = surveyService.retrieveQuestionDetail(surveyInput);  	

			code.setCodeGroup("MC");
			List<Code> mcCodeList = codeService.retrieveCodeList(code);

	    	model.addAttribute("input", input);
	        model.addAttribute("menu", menu);
	        model.addAttribute("result", result);
	        model.addAttribute("helpdeskList", helpdeskList);
	        model.addAttribute("surveyList", surveyList);
	        model.addAttribute("mcCodeList", mcCodeList);
	        
	        return retrunUrl;
			
		} else {    		
		
			return "redirect:/common/error/lostSession.do";  
			
		} 
		
    }
    
    @RequestMapping(value="/contents/injection/insertQuestionInfo.do")
    public String insertQuestion(Helpdesk input, ModelMap model, HttpSession session){
    	    	
    	helpdeskService.insertQuestionInfo(input);

		input.setStateCode(null);
    	Contents contentsInput = new Contents();
    	contentsInput.setUserId(input.getUserId());
    	contentsInput.setMenuId(input.getMenuId());
    	contentsInput.setContentsId(input.getContentsId());	
    	
    	Contents result = contentsService.retrieveContents(contentsInput);
    	List<Helpdesk> helpdeskList = helpdeskService.retrieveHelpdeskContentsList(input);    	

    	model.addAttribute("input", input);
        model.addAttribute("result", result);
        model.addAttribute("helpdeskList", helpdeskList);
    	
        return "contents/academy/injection/contentsDetail";
        
    } 
	
	@RequestMapping(value="/contents/injection/updateQuestionInfo.do")
	public String updatetSurveyResult(Helpdesk input, ModelMap model, HttpSession session){
    			
		if(input.getType().equals("D")) {
			input.setAnswerContents(null);
			input.setAnswerDate(null);
			input.setStateCode("01");			
		} 
		
		helpdeskService.updateQuestionInfo(input);

		input.setStateCode(null);
		Contents contentsInput = new Contents();
		contentsInput.setUserId(input.getUserId());
		contentsInput.setMenuId(input.getMenuId());
		contentsInput.setContentsId(input.getContentsId());	
		
		Contents result = contentsService.retrieveContents(contentsInput);
		List<Helpdesk> helpdeskList = helpdeskService.retrieveHelpdeskContentsList(input);    	

		model.addAttribute("input", input);
		model.addAttribute("result", result);
		model.addAttribute("helpdeskList", helpdeskList);
		
		return "contents/academy/injection/contentsDetail";
		
	}  
	
	@RequestMapping(value="/contents/injection/insertSurveyResult.do")
	public String insertSurveyResult(Survey input, ModelMap model, HttpSession session){
		
		surveyService.insertSurveyResult(input);
		
		model.addAttribute("input", input);
		
		return "redirect:/contents/injectionList.do";
				
	}

	// 관리자 Contents 입력 페이지
	@RequestMapping(value = "/contents/injectionWrite.do")
	public String contentsInjectionWrite(Contents input, Code code, ModelMap model, HttpSession session) {

		List<User> lecturerList = userService.retrieveLecturerList(input);

		String menuId = contentsService.retrieveFrontMenuId(input).getMenuId();
		input.setMenuId(menuId);

		code.setCodeGroup(menuId);
		List<Code> categoryCodeList = codeService.retrieveCodeList(code);
		List<Code> surveyList = codeService.retrieveSurveyList();

		model.addAttribute("categoryCodeList", categoryCodeList);
		model.addAttribute("lecturerList", lecturerList);
		model.addAttribute("surveyList", surveyList);
		
		return "admin/contents/academy/injection/contentsWrite";
	}

	// 관리자 Contents 수정 페이지
	@RequestMapping(value = "/contents/injectionEdit.do")
	public String contentsInjectionUpdate(Contents input, Code code, ModelMap model, HttpSession session) {

		List<User> resultList = userService.retrieveLecturerList(input);
		input.setUserId((String) session.getAttribute("userId"));
		input.setMenuId(contentsService.retrieveFrontMenuId(input).getMenuId());
		Contents contents = contentsService.retrieveContents(input);

		code.setCodeGroup(input.getMenuId());
		List<Code> categoryCodeList = codeService.retrieveCodeList(code);
		List<User> lecturerList = userService.retrieveLecturerList(input);
		List<Code> surveyList = codeService.retrieveSurveyList();
		
		model.addAttribute("resultList", resultList);
		model.addAttribute("categoryCodeList", categoryCodeList);
		model.addAttribute("lecturerList", lecturerList);
		model.addAttribute("surveyList", surveyList);
		model.addAttribute("contentsResult", contents);

		return "admin/contents/academy/injection/contentsUpdate";
	}

	// Contents 저장
	@RequestMapping(value = "/contents/injectionInsert.do")
	public String insertContents(Contents input, Code code, ModelMap model, MultipartHttpServletRequest mpRequest, HttpSession session) {
		
		String menuId = (String) session.getAttribute("menuId");		
		input.setMenuId(menuId);

		if (contentsService.retrieveFrontMenuId(input) != null
				&& !"".equals(contentsService.retrieveFrontMenuId(input))) {
			input.setMenuId(contentsService.retrieveFrontMenuId(input).getMenuId());
		}
		
		code.setCodeGroup(menuId);
		
		String fildId = utilService.getRandomUuid(10);
		input.setFileId(fildId); // 신규 생성 랜덤 fileId 세팅
		Iterator<String> iterator = mpRequest.getFileNames();

		MultipartFile multipartFile = null;
		int fileNumber = 1;
		String fileName = null;
		String uploadFilePath = null;
		String uploadFileName = null;
		long fileSize = 0;
		String fileExtension = null;
		String userId = null;

		// file과 contents에 남길 userId 세팅
		userId = (String) session.getAttribute("userId");
		input.setUserId(userId);

		Map<String, Object> listMap = null;

		while (iterator.hasNext()) {
			multipartFile = mpRequest.getFile(iterator.next());

			if (multipartFile.isEmpty() == false) {
				UploadFileInfo uploadFileInfo = fileUpload.upload(multipartFile);

				fileName = uploadFileInfo.getClientFileName();
				uploadFilePath = uploadFileInfo.getServerPath();
				uploadFileName = uploadFileInfo.getServerFileName();
				fileSize = uploadFileInfo.getSize();
				fileExtension = uploadFileInfo.getClientFileName()
						.substring(uploadFileInfo.getClientFileName().lastIndexOf(".") + 1);

				try {
					listMap = new HashMap<String, Object>();
					listMap.put("fileId", fildId);
					listMap.put("fileNumber", fileNumber++);
					listMap.put("fileName", fileName);
					listMap.put("uploadFilePath", uploadFilePath);
					listMap.put("uploadFileName", uploadFileName);
					listMap.put("fileSize", fileSize);
					listMap.put("fileExtension", fileExtension);
					listMap.put("createId", userId);
					listMap.put("updateId", userId);
					// contents 사진 파일 저장
					fileUploadService.insertFileInfo(listMap);

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			}
		}

		// contents_info 테이블에 저장
		contentsService.insertContents(input);

		String redirectUrl = "redirect:/contents/injectionList.do?menuId=" + menuId;
		
		return redirectUrl;
	}

	// Contents 수정
	@RequestMapping(value = "/contents/injectionUpdate.do")
	public String updateContents(Contents input, ModelMap model, MultipartHttpServletRequest mpRequest, HttpSession session) {

		Iterator<String> iterator = mpRequest.getFileNames();
		
		String fildId = input.getFileId();
		MultipartFile multipartFile = null;
		int fileNumber = 0;
		String fileName = null;
		String uploadFilePath = null;
		String uploadFileName = null;
		long fileSize = 0;
		String fileExtension = null;
		String userId = null;
		String requestName;

		// file과 contents에 남길 userId 세팅
		userId = (String) session.getAttribute("userId");
		input.setUserId(userId);

		Map<String, Object> listMap = null;

		while (iterator.hasNext()) {
			multipartFile = mpRequest.getFile(iterator.next());

			if (multipartFile.isEmpty() == false) {
				UploadFileInfo uploadFileInfo = fileUpload.upload(multipartFile);
				
				requestName = multipartFile.getName();
				fileNumber = Integer.parseInt(requestName.substring(requestName.indexOf("_")+1));
				
				fileName = uploadFileInfo.getClientFileName();
				uploadFilePath = uploadFileInfo.getServerPath();
				uploadFileName = uploadFileInfo.getServerFileName();
				fileSize = uploadFileInfo.getSize();
				fileExtension = uploadFileInfo.getClientFileName().substring(uploadFileInfo.getClientFileName().lastIndexOf(".") + 1);

				try {
					listMap = new HashMap<String, Object>();
					listMap.put("fileId", fildId);
					listMap.put("fileNumber", fileNumber);
					listMap.put("fileName", fileName);
					listMap.put("uploadFilePath", uploadFilePath);
					listMap.put("uploadFileName", uploadFileName);
					listMap.put("fileSize", fileSize);
					listMap.put("fileExtension", fileExtension);
					listMap.put("updateId", userId);
					// contents 사진 파일 저장
					fileUploadService.updateFileInfo(listMap);

				} catch (IllegalStateException e) {
					e.printStackTrace();
				}
			}
		}

		// contents_info 테이블에 저장
		contentsService.updateContents(input);
		String menuId = (String) session.getAttribute("menuId");
		String redirectUrl = "redirect:/contents/injectionList.do?menuId=" + menuId;
		
		return redirectUrl;
	}

	// Contents 삭제
	@RequestMapping(value = "/contents/injectionDelete.do")
	public String deleteContents(Contents input, ModelMap model, HttpSession session) {
		
		String userId = (String) session.getAttribute("userId");
		input.setUserId(userId);
		
		contentsService.updateDeleteYnContents(input);
		String menuId = (String) session.getAttribute("menuId");

		String redirectUrl = "redirect:/contents/injectionList.do?menuId=" + menuId;
		
		return redirectUrl;
	}
    
}

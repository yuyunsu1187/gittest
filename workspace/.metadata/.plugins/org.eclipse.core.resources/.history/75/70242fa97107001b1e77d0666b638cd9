package devonframe.gyva.common.user.controller;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import devonframe.fileupload.FileUpload;
import devonframe.fileupload.model.UploadFileInfo;
import devonframe.gyva.admin.system.code.model.Code;
import devonframe.gyva.admin.system.code.service.CodeService;
import devonframe.gyva.common.fileupload.service.FileUploadService;
import devonframe.gyva.common.user.model.User;
import devonframe.gyva.common.user.service.UserService;
import devonframe.gyva.common.util.UtilService;
import devonframe.gyva.contents.service.ContentsService;
import devonframe.paging.model.PagingMap;
import devonframe.paging.policy.annotation.PagingPolicy;

/**
 * <pre>
 * 본 클래스는 사용자 정보에 대한 CRUD를 담당하는 Controller 클래스입니다.
 * </pre>
 *
 * @author XXX팀 OOO
 */

@Controller("userWebPagingController")
public class UserController {

	@Resource(name = "userService")
	private UserService userService;
	
	@Resource(name = "codeService")
	private CodeService codeService;
	
    @Resource(name = "contentsService")
    private ContentsService contentsService;
	
	@Resource(name = "fileUpload")
	private FileUpload fileUpload;
	
	@Resource(name = "utilService")
	private UtilService utilService;
	
	@Resource(name = "fileUploadService")
	private FileUploadService fileUploadService;
	
	static final Logger LOGGER = LoggerFactory.getLogger(UserController.class);
	
	// 회원 정보 조회
	@RequestMapping(value="/mypage/userInfo.do")
	public String retrieveUser(User input, ModelMap model, HttpSession session){
		
		String email = (String) session.getAttribute("email");;		
		input.setEmail(email);
		
		User user = null;

		user = userService.retrieveUser(input);
		model.addAttribute("result", user);

		return "common/login/myPageForm";
	}
	
	// 아이디 중복체크
	@ResponseBody
	@RequestMapping(value = "/common/user/idChk.do")
	public int idChk(User input, ModelMap model) {
		int result = userService.idChk(input);
		return result;
	}	

	// 회원 정보 수정
	@RequestMapping(value = "/common/user/updateUser.do")
	public String updateUser(User input, ModelMap model) {
		userService.updateUser(input);
		return "redirect:/main.do?msg=success";
	}

	// 회원 정보 삭제
	@RequestMapping(value="/common/user/deleteUser.do")
	public String deleteUser(User input, ModelMap model){
		userService.deleteUser(input);
		return "redirect:/loginForm.do";
	}
	
	// 회원 저장
	@RequestMapping(value = "/common/user/insertUser.do")
	public String insertUser(User input, ModelMap model, MultipartHttpServletRequest mpRequest) throws Exception {
		
		// ID 중복 체크
		int result = userService.idChk(input);

		// 중복 ID가 없을 경우에만 저장
		if(result == 1){
			return "/common/login/joinForm";
		} else {
										
			String fildId = utilService.getRandomUuid(10);
			input.setFileId(fildId);
			Iterator<String> iterator = mpRequest.getFileNames();
			
			MultipartFile multipartFile = null;
			int fileNumber = 1;
			String fileName = null;
			String uploadFilePath = null;
			String uploadFileName = null;
			long fileSize = 0;
			String fileExtension = null;
			
			Map<String, Object> listMap = null;
			
			while(iterator.hasNext()) {
				multipartFile = mpRequest.getFile(iterator.next());
				if(multipartFile.isEmpty() == false) {					
					try {
						UploadFileInfo uploadFileInfo = fileUpload.upload(multipartFile);
						
						fileName = uploadFileInfo.getClientFileName();
						uploadFilePath = uploadFileInfo.getServerPath();
						uploadFileName = uploadFileInfo.getServerFileName();
						fileSize = uploadFileInfo.getSize();
						fileExtension = uploadFileInfo.getClientFileName().substring(uploadFileInfo.getClientFileName().lastIndexOf(".")+1);
						
						listMap = new HashMap<String, Object>();
						listMap.put("fileId", fildId);
						listMap.put("fileNumber", fileNumber++);
						listMap.put("fileName", fileName);
						listMap.put("uploadFilePath", uploadFilePath);
						listMap.put("uploadFileName", uploadFileName);
						listMap.put("fileSize", fileSize);
						listMap.put("fileExtension", fileExtension);
						
						// 회원 사진 파일 저장
						fileUploadService.insertFileInfo(listMap);

					} catch (Exception e) {
						LOGGER.error("File Upload Error : " + e.getMessage());
						throw new Exception(this.getClass().getName(), e);
					}
				}
			}

			// user_info 테이블에 저장
			userService.insertUser(input);
		}
		return "redirect:/loginForm.do";
	}
	
	// 사용자 관리 리스트
    @RequestMapping(value="/admin/user/userList.do")
    public String retrieveUserList(@PagingPolicy("policy2")PagingMap pagingMap, User input, ModelMap model,  HttpSession session){
		
        Code codeGroup = new Code();
        codeGroup.setCodeGroup("USER");
        
    	pagingMap.getMap().put("stateCode", "02");
		
		List<User> resultList = userService.retrieveUserPagedList(pagingMap);
		
		model.addAttribute("input", pagingMap.getMap());
		model.addAttribute("resultList", resultList);
		model.addAttribute("userTypeList", codeService.retrieveUserTypeList(codeGroup));
    	
        return "admin/user/user/list";
    }
    
    // 승인 요청 리스트
    @RequestMapping(value="/admin/user/userConfirmList.do")
    public String retrieveUserConfirmList(@PagingPolicy("policy2")PagingMap pagingMap, User input, ModelMap model,  HttpSession session){
		
    	pagingMap.getMap().put("stateCode", "01");
		
		List<User> resultList = userService.retrieveUserPagedList(pagingMap);
		
		model.addAttribute("resultList", resultList);
    	
        return "admin/user/user/userConfirm";
    }
    
    
    // 회원 정보 삭제
 	@RequestMapping(value="/admin/user/user/deleteUser.do")
 	public String deleteUserList(User input, ModelMap model){
 		userService.deleteUser(input);
 		return "admin/user/user/list";
 	}
 	
 	// 회원 상세 정보 조회
  	@RequestMapping(value="/admin/user/userDetail.do")
  	public String retrieveUser(User input, ModelMap model, HttpSession session, Code code){
  		
  		code.setCodeGroup("COUNTRY");
		List<Code> countryCodeList = codeService.retrieveCodeList(code);
		code.setCodeGroup("SPECIAL");
		List<Code> specialCodeList = codeService.retrieveCodeList(code);
		
		User user = null;
		Code codeGroup = new Code();
		codeGroup.setCodeGroup("USER");

		user = userService.retrieveUser(input);
		model.addAttribute("userTypeList", codeService.retrieveUserTypeList(codeGroup));
        model.addAttribute("countryCodeList", countryCodeList);
        model.addAttribute("specialCodeList", specialCodeList);
		model.addAttribute("result", user);
		
  		return "admin/user/user/detail";
  	}
  	
  	// 회원 정보 수정
 	@RequestMapping(value = "/admin/user/user/updateUser.do")
	public String updateUser(User input, ModelMap model, MultipartHttpServletRequest mpRequest, HttpSession session) throws Exception{

 		String fildId = utilService.getRandomUuid(10);
			input.setFileId(fildId);
			Iterator<String> iterator = mpRequest.getFileNames();
			
			MultipartFile multipartFile = null;
			int fileNumber = 1;
			String fileName = null;
			String uploadFilePath = null;
			String uploadFileName = null;
			long fileSize = 0;
			String fileExtension = null;
			String userId = null;
			
			// file과 contents에 남길 userId 세팅
			userId = (String) session.getAttribute("userId");
			input.setUpdateId(userId);
			
			Map<String, Object> listMap = null;
			
			// 파일 존재 유무 구분값
			boolean fileCheck = false;
			
			while(iterator.hasNext()) {
				multipartFile = mpRequest.getFile(iterator.next());
				
				if(multipartFile.isEmpty() == false) {					
					try {
						fileCheck = true;
						
						UploadFileInfo uploadFileInfo = fileUpload.upload(multipartFile);
						
						fileName = uploadFileInfo.getClientFileName();
						uploadFilePath = uploadFileInfo.getServerPath();
						uploadFileName = uploadFileInfo.getServerFileName();
						fileSize = uploadFileInfo.getSize();
						fileExtension = uploadFileInfo.getClientFileName().substring(uploadFileInfo.getClientFileName().lastIndexOf(".")+1);
						
						listMap = new HashMap<String, Object>();
						listMap.put("fileId", fildId);
						listMap.put("fileNumber", fileNumber++);
						listMap.put("fileName", fileName);
						listMap.put("uploadFilePath", uploadFilePath);
						listMap.put("uploadFileName", uploadFileName);
						listMap.put("fileSize", fileSize);
						listMap.put("fileExtension", fileExtension);
						listMap.put("createId", userId);
						listMap.put("updateId", userId);
						
						// 회원 사진 파일 저장
						fileUploadService.insertFileInfo(listMap);

					} catch (Exception e) {
						LOGGER.error("File Upload Error : " + e.getMessage());
						throw new Exception(this.getClass().getName(), e);
					}
				}
			}

			// 파일이 없을경우 contents에 file_id 초기화
			if(!fileCheck){
				input.setFileId(null);
			}
			if(input.getReaderUserId().isEmpty()){
				// user_info 테이블에 저장
				userService.insertLecturer(input);
			}else{
				// user_info 테이블에 저장
				userService.updateLecturer(input);
			}
			
			// user_info 테이블에 저장
			userService.updateUserLecturer(input);
 		return "redirect:/admin/user/userList.do";
 	}
 	
	// 회원 정보 수정 (userType - update)
	@RequestMapping(value = "/admin/user/user/updateUserType.do")
	public String updateUserType(@RequestParam(value="userCheckList[]") List<String> userCheckList, User input, HttpSession session) throws Exception {
		System.out.println("================= "+input.toString());
		for(String seq : userCheckList){
			// checkbox list 세팅
			input.setSeq(seq);
			// user_info 테이블 update
			userService.updateUserType(input);
		}
		return "redirect:/admin/user/userList.do";
	}
	
 	
	// 회원 정보 삭제
	@RequestMapping(value="/admin/user/user/deleteUserList.do")
	public String deleteUserList(@RequestParam(value="userCheckList[]") List<String> userCheckList, User input, HttpSession session) throws Exception {
		
		for(String seq : userCheckList){
			// checkbox list 세팅
			input.setSeq(seq);
			
			// user_info 테이블 update
			userService.deleteUser(input);
		}
		return "redirect:/admin/user/userList.do";
	}
 	
}
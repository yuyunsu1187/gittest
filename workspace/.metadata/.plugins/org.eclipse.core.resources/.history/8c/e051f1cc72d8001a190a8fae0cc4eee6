package devonframe.gyva.front.common.fileupload.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import devonframe.fileupload.model.UploadFileInfo;
import devonframe.gyva.front.common.fileupload.model.FileInfo;
import devonframe.gyva.front.common.user.model.User;
import devonframe.util.DateUtil;



@Component("fileUtils")
public class FileUtils {
	
	@Resource(name = "fileUpload")
	private FileUpload fileUpload;
	
	@Resource(name = "fileUploadService")
	private FileUploadService fileUploadService;

	public List<Map<String, Object>> parseInsertFileInfo(String fildId, MultipartHttpServletRequest mpRequest) {

		FileInfo fileInfo = new FileInfo();
        UploadFileInfo uploadFileInfo = fileUpload.upload(uploadFile);

        fileInfo.setFileName(uploadFileInfo.getClientFileName());
        fileInfo.setUploadFilePath(uploadFileInfo.getServerPath());
        fileInfo.setUploadFileName(uploadFileInfo.getServerFileName());
        fileInfo.setFileSize(uploadFileInfo.getSize());
        fileInfo.setUploadDate(DateUtil.getDate("yyyyMMdd"));
        
        fileUploadService.insertFileInfo(fileInfo);
        
//			Iterator은 데이터들의 집합체? 에서 컬렉션으로부터 정보를 얻어올 수 있는 인터페이스입니다.
//			List나 배열은 순차적으로 데이터의 접근이 가능하지만, Map등의 클래스들은 순차적으로 접근할 수가 없습니다.
//			Iterator을 이용하여 Map에 있는 데이터들을 while문을 이용하여 순차적으로 접근합니다.
		
		List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
		
		
		return list;
	}
	
	// file download 미작업
	public List<Map<String, Object>> parseUpdateFileInfo(User user, String[] files, String[] fileNames, MultipartHttpServletRequest mpRequest) {
		
		Iterator<String> iterator = mpRequest.getFileNames();
		
		MultipartFile multipartFile = null; 
		String fileName = null;
	    String uploadFilePath = null; 
	    String uploadFileName = null; 
	    long fileSize = 0;
		
		List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
		Map<String, Object> listMap = null; 
		
		while(iterator.hasNext()){ 		
			multipartFile = mpRequest.getFile(iterator.next());
			if(multipartFile.isEmpty() == false){ 
//				UploadFileInfo uploadFileInfo = fileUpload.upload(multipartFile);
//				fileName = uploadFileInfo.getClientFileName();
//				uploadFilePath = uploadFileInfo.getServerPath();
//				uploadFileName = uploadFileInfo.getServerFileName();
//				fileSize = uploadFileInfo.getSize();
//			    
////				multipartFile.transferTo(new File(uploadFilePath));
//			    
//				listMap = new HashMap<String,Object>();
//				listMap.put("IS_NEW", "Y");
//				listMap.put("fileName", user.getFileId()); 
//				listMap.put("uploadFilePath", fileName);
//				listMap.put("uploadFileName", uploadFileName); 
//				listMap.put("fileSize", multipartFile.getSize()); 
//				list.add(listMap); 
			} 
		}
		
		if(files != null && fileNames != null){ 
			for(int i = 0; i<fileNames.length; i++) {
					listMap = new HashMap<String,Object>();
					listMap.put("IS_NEW", "N"); 
					listMap.put("FILE_NO", files[i]); 
					list.add(listMap); 
			}
		}
		return list; 
	}

	
//	public static String getRandomString() {
//		return UUID.randomUUID().toString().replaceAll("-", "");
//	}
}








